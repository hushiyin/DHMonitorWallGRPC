// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MonitorWall.proto

#include "MonitorWall.pb.h"
#include "MonitorWall.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MonitorWall {

static const char* SWKJMonitorWall_method_names[] = {
  "/MonitorWall.SWKJMonitorWall/login",
  "/MonitorWall.SWKJMonitorWall/checkLogin",
  "/MonitorWall.SWKJMonitorWall/getTVNum",
  "/MonitorWall.SWKJMonitorWall/createWall",
  "/MonitorWall.SWKJMonitorWall/setVideoSource",
  "/MonitorWall.SWKJMonitorWall/delVideoSource",
  "/MonitorWall.SWKJMonitorWall/searchDev",
  "/MonitorWall.SWKJMonitorWall/getDisplayMes",
  "/MonitorWall.SWKJMonitorWall/getTVStatus",
  "/MonitorWall.SWKJMonitorWall/splitWindow",
  "/MonitorWall.SWKJMonitorWall/queryWindowStreamInfo",
};

std::unique_ptr< SWKJMonitorWall::Stub> SWKJMonitorWall::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SWKJMonitorWall::Stub> stub(new SWKJMonitorWall::Stub(channel, options));
  return stub;
}

SWKJMonitorWall::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_login_(SWKJMonitorWall_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkLogin_(SWKJMonitorWall_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTVNum_(SWKJMonitorWall_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createWall_(SWKJMonitorWall_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setVideoSource_(SWKJMonitorWall_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delVideoSource_(SWKJMonitorWall_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_searchDev_(SWKJMonitorWall_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDisplayMes_(SWKJMonitorWall_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTVStatus_(SWKJMonitorWall_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_splitWindow_(SWKJMonitorWall_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryWindowStreamInfo_(SWKJMonitorWall_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SWKJMonitorWall::Stub::login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_login_, context, request, response);
}

void SWKJMonitorWall::Stub::async::login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::codeResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_checkLogin_, context, request, response);
}

void SWKJMonitorWall::Stub::async::checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkLogin_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::codeResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_checkLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::AsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccheckLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::decoderOutTVNumResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTVNum_, context, request, response);
}

void SWKJMonitorWall::Stub::async::getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTVNum_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTVNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>* SWKJMonitorWall::Stub::PrepareAsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::decoderOutTVNumResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTVNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>* SWKJMonitorWall::Stub::AsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTVNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::MonitorWall::tvMesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createWall_, context, request, response);
}

void SWKJMonitorWall::Stub::async::createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createWall_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createWall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* SWKJMonitorWall::Stub::PrepareAsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::tvMesResponse, ::MonitorWall::wallConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createWall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* SWKJMonitorWall::Stub::AsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateWallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::MonitorWall::codeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setVideoSource_, context, request, response);
}

void SWKJMonitorWall::Stub::async::setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setVideoSource_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setVideoSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::PrepareAsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::codeResponse, ::MonitorWall::setSourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setVideoSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::AsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetVideoSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::MonitorWall::codeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delVideoSource_, context, request, response);
}

void SWKJMonitorWall::Stub::async::delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delVideoSource_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delVideoSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::PrepareAsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::codeResponse, ::MonitorWall::delSourceRequset, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delVideoSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::AsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelVideoSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::MonitorWall::searchDevRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::empty, ::MonitorWall::searchDevRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_searchDev_, context, request, response);
}

void SWKJMonitorWall::Stub::async::searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::empty, ::MonitorWall::searchDevRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_searchDev_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_searchDev_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>* SWKJMonitorWall::Stub::PrepareAsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::searchDevRequest, ::MonitorWall::empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_searchDev_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>* SWKJMonitorWall::Stub::AsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchDevRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::allWindowDisplayMesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDisplayMes_, context, request, response);
}

void SWKJMonitorWall::Stub::async::getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDisplayMes_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDisplayMes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>* SWKJMonitorWall::Stub::PrepareAsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::allWindowDisplayMesResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDisplayMes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>* SWKJMonitorWall::Stub::AsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDisplayMesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::tvMesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTVStatus_, context, request, response);
}

void SWKJMonitorWall::Stub::async::getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTVStatus_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTVStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* SWKJMonitorWall::Stub::PrepareAsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::tvMesResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTVStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* SWKJMonitorWall::Stub::AsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTVStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::MonitorWall::codeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_splitWindow_, context, request, response);
}

void SWKJMonitorWall::Stub::async::splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_splitWindow_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_splitWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::PrepareAsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::codeResponse, ::MonitorWall::splitWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_splitWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* SWKJMonitorWall::Stub::AsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsplitWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SWKJMonitorWall::Stub::queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::windowSreamInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryWindowStreamInfo_, context, request, response);
}

void SWKJMonitorWall::Stub::async::queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryWindowStreamInfo_, context, request, response, std::move(f));
}

void SWKJMonitorWall::Stub::async::queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryWindowStreamInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>* SWKJMonitorWall::Stub::PrepareAsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MonitorWall::windowSreamInfoResponse, ::MonitorWall::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryWindowStreamInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>* SWKJMonitorWall::Stub::AsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryWindowStreamInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

SWKJMonitorWall::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::codeResponse* resp) {
               return service->login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::codeResponse* resp) {
               return service->checkLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::decoderOutTVNumResponse* resp) {
               return service->getTVNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::wallConfigRequest* req,
             ::MonitorWall::tvMesResponse* resp) {
               return service->createWall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::setSourceRequest* req,
             ::MonitorWall::codeResponse* resp) {
               return service->setVideoSource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::delSourceRequset* req,
             ::MonitorWall::codeResponse* resp) {
               return service->delVideoSource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::empty, ::MonitorWall::searchDevRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::empty* req,
             ::MonitorWall::searchDevRequest* resp) {
               return service->searchDev(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::allWindowDisplayMesResponse* resp) {
               return service->getDisplayMes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::tvMesResponse* resp) {
               return service->getTVStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::splitWindowRequest* req,
             ::MonitorWall::codeResponse* resp) {
               return service->splitWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SWKJMonitorWall_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SWKJMonitorWall::Service, ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SWKJMonitorWall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MonitorWall::loginRequest* req,
             ::MonitorWall::windowSreamInfoResponse* resp) {
               return service->queryWindowStreamInfo(ctx, req, resp);
             }, this)));
}

SWKJMonitorWall::Service::~Service() {
}

::grpc::Status SWKJMonitorWall::Service::login(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::checkLogin(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::getTVNum(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::createWall(::grpc::ServerContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::setVideoSource(::grpc::ServerContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::delVideoSource(::grpc::ServerContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::searchDev(::grpc::ServerContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::getDisplayMes(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::getTVStatus(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::splitWindow(::grpc::ServerContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SWKJMonitorWall::Service::queryWindowStreamInfo(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MonitorWall

