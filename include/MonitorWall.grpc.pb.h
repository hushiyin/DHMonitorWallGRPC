// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MonitorWall.proto
#ifndef GRPC_MonitorWall_2eproto__INCLUDED
#define GRPC_MonitorWall_2eproto__INCLUDED

#include "MonitorWall.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MonitorWall {

// *
// ip：192.168.17.46
// port:50051
//
// 定义方法
class SWKJMonitorWall final {
 public:
  static constexpr char const* service_full_name() {
    return "MonitorWall.SWKJMonitorWall";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // @ brief 登录解码器（无需客户端调用）
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> Asynclogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    // *
    // @ brief 验证是否登录（无需客户端调用）
    virtual ::grpc::Status checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> AsynccheckLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(AsynccheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> PrepareAsynccheckLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(PrepareAsynccheckLoginRaw(context, request, cq));
    }
    // *
    // @ brief 获取解码器输出通道数
    virtual ::grpc::Status getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::decoderOutTVNumResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>> AsyncgetTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>>(AsyncgetTVNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>> PrepareAsyncgetTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>>(PrepareAsyncgetTVNumRaw(context, request, cq));
    }
    // *
    // @ brief 创建电视墙
    virtual ::grpc::Status createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::MonitorWall::tvMesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>> AsynccreateWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>>(AsynccreateWallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>> PrepareAsynccreateWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>>(PrepareAsynccreateWallRaw(context, request, cq));
    }
    // *
    // @ brief 绑定信号源
    virtual ::grpc::Status setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::MonitorWall::codeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> AsyncsetVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(AsyncsetVideoSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> PrepareAsyncsetVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(PrepareAsyncsetVideoSourceRaw(context, request, cq));
    }
    // *
    // @ brief 解绑信号源
    virtual ::grpc::Status delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::MonitorWall::codeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> AsyncdelVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(AsyncdelVideoSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> PrepareAsyncdelVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(PrepareAsyncdelVideoSourceRaw(context, request, cq));
    }
    // *
    // @ brief 查询信号源
    virtual ::grpc::Status searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::MonitorWall::searchDevRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>> AsyncsearchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>>(AsyncsearchDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>> PrepareAsyncsearchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>>(PrepareAsyncsearchDevRaw(context, request, cq));
    }
    // *
    // @ brief 显示信息
    virtual ::grpc::Status getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::allWindowDisplayMesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>> AsyncgetDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>>(AsyncgetDisplayMesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>> PrepareAsyncgetDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>>(PrepareAsyncgetDisplayMesRaw(context, request, cq));
    }
    // *
    // @ brief 查询已绑定输出口的状态
    virtual ::grpc::Status getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::tvMesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>> AsyncgetTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>>(AsyncgetTVStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>> PrepareAsyncgetTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>>(PrepareAsyncgetTVStatusRaw(context, request, cq));
    }
    // *
    // @ brief 分割窗口
    virtual ::grpc::Status splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::MonitorWall::codeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> AsyncsplitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(AsyncsplitWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>> PrepareAsyncsplitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>>(PrepareAsyncsplitWindowRaw(context, request, cq));
    }
    // *
    // @ brief 查询窗口帧率
    virtual ::grpc::Status queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::windowSreamInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>> AsyncqueryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>>(AsyncqueryWindowStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>> PrepareAsyncqueryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>>(PrepareAsyncqueryWindowStreamInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // *
      // @ brief 登录解码器（无需客户端调用）
      virtual void login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 验证是否登录（无需客户端调用）
      virtual void checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 获取解码器输出通道数
      virtual void getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 创建电视墙
      virtual void createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 绑定信号源
      virtual void setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 解绑信号源
      virtual void delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 查询信号源
      virtual void searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 显示信息
      virtual void getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 查询已绑定输出口的状态
      virtual void getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 分割窗口
      virtual void splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // @ brief 查询窗口帧率
      virtual void queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* AsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>* AsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::decoderOutTVNumResponse>* PrepareAsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>* AsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>* PrepareAsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* AsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* PrepareAsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* AsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* PrepareAsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>* AsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::searchDevRequest>* PrepareAsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>* AsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::allWindowDisplayMesResponse>* PrepareAsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>* AsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::tvMesResponse>* PrepareAsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* AsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::codeResponse>* PrepareAsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>* AsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MonitorWall::windowSreamInfoResponse>* PrepareAsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> Asynclogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::codeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> AsynccheckLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(AsynccheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> PrepareAsynccheckLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(PrepareAsynccheckLoginRaw(context, request, cq));
    }
    ::grpc::Status getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::decoderOutTVNumResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>> AsyncgetTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>>(AsyncgetTVNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>> PrepareAsyncgetTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>>(PrepareAsyncgetTVNumRaw(context, request, cq));
    }
    ::grpc::Status createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::MonitorWall::tvMesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>> AsynccreateWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>>(AsynccreateWallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>> PrepareAsynccreateWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>>(PrepareAsynccreateWallRaw(context, request, cq));
    }
    ::grpc::Status setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::MonitorWall::codeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> AsyncsetVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(AsyncsetVideoSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> PrepareAsyncsetVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(PrepareAsyncsetVideoSourceRaw(context, request, cq));
    }
    ::grpc::Status delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::MonitorWall::codeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> AsyncdelVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(AsyncdelVideoSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> PrepareAsyncdelVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(PrepareAsyncdelVideoSourceRaw(context, request, cq));
    }
    ::grpc::Status searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::MonitorWall::searchDevRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>> AsyncsearchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>>(AsyncsearchDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>> PrepareAsyncsearchDev(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>>(PrepareAsyncsearchDevRaw(context, request, cq));
    }
    ::grpc::Status getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::allWindowDisplayMesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>> AsyncgetDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>>(AsyncgetDisplayMesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>> PrepareAsyncgetDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>>(PrepareAsyncgetDisplayMesRaw(context, request, cq));
    }
    ::grpc::Status getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::tvMesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>> AsyncgetTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>>(AsyncgetTVStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>> PrepareAsyncgetTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>>(PrepareAsyncgetTVStatusRaw(context, request, cq));
    }
    ::grpc::Status splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::MonitorWall::codeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> AsyncsplitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(AsyncsplitWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>> PrepareAsyncsplitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>>(PrepareAsyncsplitWindowRaw(context, request, cq));
    }
    ::grpc::Status queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::MonitorWall::windowSreamInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>> AsyncqueryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>>(AsyncqueryWindowStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>> PrepareAsyncqueryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>>(PrepareAsyncqueryWindowStreamInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) override;
      void checkLogin(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, std::function<void(::grpc::Status)>) override;
      void getTVNum(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)>) override;
      void createWall(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) override;
      void setVideoSource(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) override;
      void delVideoSource(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, std::function<void(::grpc::Status)>) override;
      void searchDev(::grpc::ClientContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, std::function<void(::grpc::Status)>) override;
      void getDisplayMes(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, std::function<void(::grpc::Status)>) override;
      void getTVStatus(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, std::function<void(::grpc::Status)>) override;
      void splitWindow(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void queryWindowStreamInfo(::grpc::ClientContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* AsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>* AsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::decoderOutTVNumResponse>* PrepareAsyncgetTVNumRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* AsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* PrepareAsynccreateWallRaw(::grpc::ClientContext* context, const ::MonitorWall::wallConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* AsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* PrepareAsyncsetVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::setSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* AsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* PrepareAsyncdelVideoSourceRaw(::grpc::ClientContext* context, const ::MonitorWall::delSourceRequset& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>* AsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::searchDevRequest>* PrepareAsyncsearchDevRaw(::grpc::ClientContext* context, const ::MonitorWall::empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>* AsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::allWindowDisplayMesResponse>* PrepareAsyncgetDisplayMesRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* AsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::tvMesResponse>* PrepareAsyncgetTVStatusRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* AsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::codeResponse>* PrepareAsyncsplitWindowRaw(::grpc::ClientContext* context, const ::MonitorWall::splitWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>* AsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MonitorWall::windowSreamInfoResponse>* PrepareAsyncqueryWindowStreamInfoRaw(::grpc::ClientContext* context, const ::MonitorWall::loginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_checkLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_getTVNum_;
    const ::grpc::internal::RpcMethod rpcmethod_createWall_;
    const ::grpc::internal::RpcMethod rpcmethod_setVideoSource_;
    const ::grpc::internal::RpcMethod rpcmethod_delVideoSource_;
    const ::grpc::internal::RpcMethod rpcmethod_searchDev_;
    const ::grpc::internal::RpcMethod rpcmethod_getDisplayMes_;
    const ::grpc::internal::RpcMethod rpcmethod_getTVStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_splitWindow_;
    const ::grpc::internal::RpcMethod rpcmethod_queryWindowStreamInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // @ brief 登录解码器（无需客户端调用）
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response);
    // *
    // @ brief 验证是否登录（无需客户端调用）
    virtual ::grpc::Status checkLogin(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response);
    // *
    // @ brief 获取解码器输出通道数
    virtual ::grpc::Status getTVNum(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response);
    // *
    // @ brief 创建电视墙
    virtual ::grpc::Status createWall(::grpc::ServerContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response);
    // *
    // @ brief 绑定信号源
    virtual ::grpc::Status setVideoSource(::grpc::ServerContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response);
    // *
    // @ brief 解绑信号源
    virtual ::grpc::Status delVideoSource(::grpc::ServerContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response);
    // *
    // @ brief 查询信号源
    virtual ::grpc::Status searchDev(::grpc::ServerContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response);
    // *
    // @ brief 显示信息
    virtual ::grpc::Status getDisplayMes(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response);
    // *
    // @ brief 查询已绑定输出口的状态
    virtual ::grpc::Status getTVStatus(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response);
    // *
    // @ brief 分割窗口
    virtual ::grpc::Status splitWindow(::grpc::ServerContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response);
    // *
    // @ brief 查询窗口帧率
    virtual ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::codeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkLogin() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckLogin(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::codeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTVNum() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTVNum(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::decoderOutTVNumResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createWall() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateWall(::grpc::ServerContext* context, ::MonitorWall::wallConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::tvMesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setVideoSource() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetVideoSource(::grpc::ServerContext* context, ::MonitorWall::setSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::codeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_delVideoSource() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelVideoSource(::grpc::ServerContext* context, ::MonitorWall::delSourceRequset* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::codeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchDev() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchDev(::grpc::ServerContext* context, ::MonitorWall::empty* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::searchDevRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayMes(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::allWindowDisplayMesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTVStatus() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTVStatus(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::tvMesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_splitWindow() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsplitWindow(::grpc::ServerContext* context, ::MonitorWall::splitWindowRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::codeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryWindowStreamInfo(::grpc::ServerContext* context, ::MonitorWall::loginRequest* request, ::grpc::ServerAsyncResponseWriter< ::MonitorWall::windowSreamInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_login<WithAsyncMethod_checkLogin<WithAsyncMethod_getTVNum<WithAsyncMethod_createWall<WithAsyncMethod_setVideoSource<WithAsyncMethod_delVideoSource<WithAsyncMethod_searchDev<WithAsyncMethod_getDisplayMes<WithAsyncMethod_getTVStatus<WithAsyncMethod_splitWindow<WithAsyncMethod_queryWindowStreamInfo<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkLogin() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::codeResponse* response) { return this->checkLogin(context, request, response); }));}
    void SetMessageAllocatorFor_checkLogin(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTVNum() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::decoderOutTVNumResponse* response) { return this->getTVNum(context, request, response); }));}
    void SetMessageAllocatorFor_getTVNum(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTVNum(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createWall() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::wallConfigRequest* request, ::MonitorWall::tvMesResponse* response) { return this->createWall(context, request, response); }));}
    void SetMessageAllocatorFor_createWall(
        ::grpc::MessageAllocator< ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createWall(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setVideoSource() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::setSourceRequest* request, ::MonitorWall::codeResponse* response) { return this->setVideoSource(context, request, response); }));}
    void SetMessageAllocatorFor_setVideoSource(
        ::grpc::MessageAllocator< ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setVideoSource(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_delVideoSource() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::delSourceRequset* request, ::MonitorWall::codeResponse* response) { return this->delVideoSource(context, request, response); }));}
    void SetMessageAllocatorFor_delVideoSource(
        ::grpc::MessageAllocator< ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delVideoSource(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_searchDev() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::empty, ::MonitorWall::searchDevRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::empty* request, ::MonitorWall::searchDevRequest* response) { return this->searchDev(context, request, response); }));}
    void SetMessageAllocatorFor_searchDev(
        ::grpc::MessageAllocator< ::MonitorWall::empty, ::MonitorWall::searchDevRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::empty, ::MonitorWall::searchDevRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchDev(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::allWindowDisplayMesResponse* response) { return this->getDisplayMes(context, request, response); }));}
    void SetMessageAllocatorFor_getDisplayMes(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayMes(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTVStatus() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::tvMesResponse* response) { return this->getTVStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getTVStatus(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTVStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_splitWindow() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::splitWindowRequest* request, ::MonitorWall::codeResponse* response) { return this->splitWindow(context, request, response); }));}
    void SetMessageAllocatorFor_splitWindow(
        ::grpc::MessageAllocator< ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* splitWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MonitorWall::loginRequest* request, ::MonitorWall::windowSreamInfoResponse* response) { return this->queryWindowStreamInfo(context, request, response); }));}
    void SetMessageAllocatorFor_queryWindowStreamInfo(
        ::grpc::MessageAllocator< ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryWindowStreamInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_login<WithCallbackMethod_checkLogin<WithCallbackMethod_getTVNum<WithCallbackMethod_createWall<WithCallbackMethod_setVideoSource<WithCallbackMethod_delVideoSource<WithCallbackMethod_searchDev<WithCallbackMethod_getDisplayMes<WithCallbackMethod_getTVStatus<WithCallbackMethod_splitWindow<WithCallbackMethod_queryWindowStreamInfo<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkLogin() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTVNum() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createWall() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setVideoSource() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_delVideoSource() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchDev() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTVStatus() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_splitWindow() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkLogin() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTVNum() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTVNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createWall() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateWall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setVideoSource() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetVideoSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_delVideoSource() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelVideoSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchDev() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchDev(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayMes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTVStatus() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTVStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_splitWindow() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsplitWindow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryWindowStreamInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~WithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkLogin() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTVNum() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTVNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTVNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createWall() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createWall(context, request, response); }));
    }
    ~WithRawCallbackMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createWall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setVideoSource() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setVideoSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setVideoSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_delVideoSource() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->delVideoSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delVideoSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_searchDev() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->searchDev(context, request, response); }));
    }
    ~WithRawCallbackMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchDev(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDisplayMes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayMes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTVStatus() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTVStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTVStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_splitWindow() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->splitWindow(context, request, response); }));
    }
    ~WithRawCallbackMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* splitWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryWindowStreamInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryWindowStreamInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>* streamer) {
                       return this->Streamedlogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::codeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkLogin() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::codeResponse>* streamer) {
                       return this->StreamedcheckLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::codeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTVNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTVNum() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::decoderOutTVNumResponse>* streamer) {
                       return this->StreamedgetTVNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTVNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTVNum(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::decoderOutTVNumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTVNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::decoderOutTVNumResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createWall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createWall() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::wallConfigRequest, ::MonitorWall::tvMesResponse>* streamer) {
                       return this->StreamedcreateWall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createWall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createWall(::grpc::ServerContext* /*context*/, const ::MonitorWall::wallConfigRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateWall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::wallConfigRequest,::MonitorWall::tvMesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setVideoSource() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::setSourceRequest, ::MonitorWall::codeResponse>* streamer) {
                       return this->StreamedsetVideoSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::setSourceRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetVideoSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::setSourceRequest,::MonitorWall::codeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_delVideoSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_delVideoSource() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::delSourceRequset, ::MonitorWall::codeResponse>* streamer) {
                       return this->StreameddelVideoSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_delVideoSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status delVideoSource(::grpc::ServerContext* /*context*/, const ::MonitorWall::delSourceRequset* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddelVideoSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::delSourceRequset,::MonitorWall::codeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchDev() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::empty, ::MonitorWall::searchDevRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::empty, ::MonitorWall::searchDevRequest>* streamer) {
                       return this->StreamedsearchDev(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_searchDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchDev(::grpc::ServerContext* /*context*/, const ::MonitorWall::empty* /*request*/, ::MonitorWall::searchDevRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchDev(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::empty,::MonitorWall::searchDevRequest>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDisplayMes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDisplayMes() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::allWindowDisplayMesResponse>* streamer) {
                       return this->StreamedgetDisplayMes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDisplayMes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDisplayMes(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::allWindowDisplayMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDisplayMes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::allWindowDisplayMesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTVStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTVStatus() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::tvMesResponse>* streamer) {
                       return this->StreamedgetTVStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTVStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTVStatus(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::tvMesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTVStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::tvMesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_splitWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_splitWindow() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::splitWindowRequest, ::MonitorWall::codeResponse>* streamer) {
                       return this->StreamedsplitWindow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_splitWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status splitWindow(::grpc::ServerContext* /*context*/, const ::MonitorWall::splitWindowRequest* /*request*/, ::MonitorWall::codeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsplitWindow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::splitWindowRequest,::MonitorWall::codeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryWindowStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryWindowStreamInfo() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MonitorWall::loginRequest, ::MonitorWall::windowSreamInfoResponse>* streamer) {
                       return this->StreamedqueryWindowStreamInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryWindowStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryWindowStreamInfo(::grpc::ServerContext* /*context*/, const ::MonitorWall::loginRequest* /*request*/, ::MonitorWall::windowSreamInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryWindowStreamInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MonitorWall::loginRequest,::MonitorWall::windowSreamInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_checkLogin<WithStreamedUnaryMethod_getTVNum<WithStreamedUnaryMethod_createWall<WithStreamedUnaryMethod_setVideoSource<WithStreamedUnaryMethod_delVideoSource<WithStreamedUnaryMethod_searchDev<WithStreamedUnaryMethod_getDisplayMes<WithStreamedUnaryMethod_getTVStatus<WithStreamedUnaryMethod_splitWindow<WithStreamedUnaryMethod_queryWindowStreamInfo<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_checkLogin<WithStreamedUnaryMethod_getTVNum<WithStreamedUnaryMethod_createWall<WithStreamedUnaryMethod_setVideoSource<WithStreamedUnaryMethod_delVideoSource<WithStreamedUnaryMethod_searchDev<WithStreamedUnaryMethod_getDisplayMes<WithStreamedUnaryMethod_getTVStatus<WithStreamedUnaryMethod_splitWindow<WithStreamedUnaryMethod_queryWindowStreamInfo<Service > > > > > > > > > > > StreamedService;
};

}  // namespace MonitorWall


#endif  // GRPC_MonitorWall_2eproto__INCLUDED
